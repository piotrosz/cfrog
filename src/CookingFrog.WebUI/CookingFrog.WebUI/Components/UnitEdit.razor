<InputSelect
    class="form-select form-select-sm"
    TValue="UnitEnum"
    ValueExpression="() => _selectedValue"
    Value="_selectedValue"
    ValueChanged="@(async (UnitEnum unit) => await PassValue(unit))">
>
    @foreach (var option in _unitOptions)
    {
        <option value="@option.Value">@option.Description</option>
    }
</InputSelect>

@code {
    [Parameter]
    public UnitEnum Unit { get; set; }

    private UnitEnum _selectedValue;
    
    [Parameter] 
    public EventCallback<UnitEnum> UpdateClicked { get; set; }
    
    private async Task PassValue(UnitEnum value)
    {
        await UpdateClicked.InvokeAsync(value);
        _selectedValue = value;
    }
    
    private IReadOnlyList<UnitOption> _unitOptions = new List<UnitOption>();

    protected override void OnInitialized()
    {
        FillUnitOptions();
        _selectedValue = Unit;
    }

    private void FillUnitOptions()
    {
        var allUnits = Enum.GetValues<UnitEnum>();

        _unitOptions = allUnits
            .Select(unit => new UnitOption
            {
                Value = unit,
                Description = unit.GetDisplayDescription()
            })
            .ToList();
    }

    private class UnitOption
    {
        public UnitEnum Value { get; set; }

        public string Description { get; set; } = string.Empty;
    }
}